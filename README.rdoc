== Gmaps4rails

Gmaps4rails is developped to simply create a Google Map (Gmaps) with model instances (say Users).
It's based on Ruby on Rails 3 Engines.
It works properly but I still have something to correct: making it work without resorting to the serve_static_assets to true in production.

== Installation

	gem install gmaps4rails

== Requirements
- jQuery (used for ajax json)
- <%= yield :head %> in your header
- config.serve_static_assets = true  (in your production.rb)

== Quickstart
In your model	
	acts_as_gmappable
	
  def gmaps4rails_address
    self.address #describe how to retrieve the address from your model
  end

  def gmaps4rails_picture
    self.picture #describe how to retrieve the picture from your model
  end

  def gmaps4rails_description
    self.name #could be html it's rendered when user clicks on the markers on the map
  end

Create a migration and add the following fields to your table:
  t.string   "gmaps4rails_latitude"
  t.string   "gmaps4rails_longitude"
  t.boolean  "gmaps"

In your view
	<%= render :partial => 'gmaps4rails/gmaps4rails', :locals => { :model => "User"}	 %>


== Options

=== Setting Map Options
In your model:
	def gmaps4rails_map_options
	  { "zoom" =>1, "latitude" => 0, "longitude" => 0}
	end
=== Scopes (displays a dropdown list enabling you to filter the map content)
In your model:
  # Whatever scope you want
	scope :low_height, lambda {|height| 
  	where("users.height <= ?", height)
  }
	scope :high_height, lambda {|height| 
  	where("users.height >= ?", height)
	}
	
	# method to fill in the dropdown list: provide scope argument, variable to pass to it, and text you want to display
  def self.gmaps4rails_filters
    [
     {"filter" => "All", "options" => "", "display" => "All"}, 
     {"filter" => "low", "options" => "130", "display" => "People Under 130cm"}, 
     {"filter" => "low", "options" => "100", "display" => "People Under 100cm"}, 
     {"filter" => "high", "options" =>"190", "display" => "People Above 190cm"},
     {"filter" => "high", "options" =>"200", "display" => "People Above 200cm"}
    ]
  end
  
	# method to filter your requests given the parameters you provided above
  def self.gmaps4rails_filter(filter, options)
    case filter
      when 'low' then self.low_height(options)
      when 'high' then self.high_height(options)
      else self.all
    end
  end

In your view:
	<%=raw gmaps4rails_filters_display("User") %>

=== Styling your Marker
In your model, add the following:

	def self.gmaps4rails_markers_pic
	  { "picture" => "http://www.ci.burlington.vt.us/planning/images/google_maps_marker.png",
	  "width" => 22,
	  "length" => 32 }
	end

== Todo
Still much more customization to provide, some ideas:
- direct integration of scopes to decide what you want to display precisely
- distance filter

Feel free ton contact me, you have your say. I hope I'll have time enough to improve it.
== Copyright

Copyright (c) 2010 apneadiving. See LICENSE for details.
